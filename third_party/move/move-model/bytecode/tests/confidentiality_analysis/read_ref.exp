============ initial translation from Move ================

[variant baseline]
fun ReadRef::read_ref_P_while_pc_P(): u64 {
     var $t0|tmp#$0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: u64
  0: $t1 := 0
  1: $t0 := $t1
  2: $t2 := borrow_local($t0)
  3: $t3 := read_ref($t2)
  4: return $t3
}


[variant baseline]
fun ReadRef::read_ref_P_while_pc_S_incorrect($t0|x: u64): u64 {
     var $t1|tmp#$1: u64
     var $t2|y: &u64
     var $t3: u64
     var $t4: &u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: &u64
     var $t9: u64
     var $t10: &u64
     var $t11: u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := move($t0)
  5: $t6 := 0
  6: $t7 := >($t5, $t6)
  7: if ($t7) goto 8 else goto 12
  8: label L1
  9: $t8 := move($t2)
 10: $t9 := read_ref($t8)
 11: return $t9
 12: label L0
 13: $t10 := move($t2)
 14: drop($t10)
 15: $t11 := 0
 16: return $t11
}


[variant baseline]
fun ReadRef::read_ref_S_while_pc_P_incorrect($t0|x: &u64): u64 {
     var $t1: &u64
     var $t2: u64
  0: $t1 := move($t0)
  1: $t2 := read_ref($t1)
  2: return $t2
}


[variant baseline]
fun ReadRef::read_ref_S_while_pc_S_incorrect($t0|x: u64, $t1|y: &u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: &u64
     var $t6: u64
     var $t7: &u64
     var $t8: u64
  0: $t2 := move($t0)
  1: $t3 := 0
  2: $t4 := >($t2, $t3)
  3: if ($t4) goto 4 else goto 8
  4: label L1
  5: $t5 := move($t1)
  6: $t6 := read_ref($t5)
  7: return $t6
  8: label L0
  9: $t7 := move($t1)
 10: drop($t7)
 11: $t8 := 0
 12: return $t8
}

============ after pipeline `confidentiality_analysis` ================

[variant baseline]
fun ReadRef::read_ref_P_while_pc_P(): u64 {
     var $t0|tmp#$0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: u64
  0: $t1 := 0
  1: $t0 := $t1
  2: $t2 := borrow_local($t0)
  3: $t3 := read_ref($t2)
  4: return $t3
}


[variant baseline]
fun ReadRef::read_ref_P_while_pc_S_incorrect($t0|x: u64): u64 {
     var $t1|tmp#$1: u64
     var $t2|y: &u64
     var $t3: u64
     var $t4: &u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: &u64
     var $t9: u64
     var $t10: &u64
     var $t11: u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := move($t0)
  5: $t6 := 0
  6: $t7 := >($t5, $t6)
  7: if ($t7) goto 8 else goto 12
  8: label L1
  9: $t8 := move($t2)
 10: $t9 := read_ref($t8)
 11: return $t9
 12: label L0
 13: $t10 := move($t2)
 14: drop($t10)
 15: $t11 := 0
 16: return $t11
}


[variant baseline]
fun ReadRef::read_ref_S_while_pc_P_incorrect($t0|x: &u64): u64 {
     var $t1: &u64
     var $t2: u64
  0: $t1 := move($t0)
  1: $t2 := read_ref($t1)
  2: return $t2
}


[variant baseline]
fun ReadRef::read_ref_S_while_pc_S_incorrect($t0|x: u64, $t1|y: &u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: &u64
     var $t6: u64
     var $t7: &u64
     var $t8: u64
  0: $t2 := move($t0)
  1: $t3 := 0
  2: $t4 := >($t2, $t3)
  3: if ($t4) goto 4 else goto 8
  4: label L1
  5: $t5 := move($t1)
  6: $t6 := read_ref($t5)
  7: return $t6
  8: label L0
  9: $t7 := move($t1)
 10: drop($t7)
 11: $t8 := 0
 12: return $t8
}

============ Diagnostics ================
warning: Explicit data leak via return of local 2
  ┌─ tests/confidentiality_analysis/read_ref.move:3:5
  │
3 │ ╭     fun read_ref_S_while_pc_P_incorrect(x: &u64): u64 {
4 │ │         *x
5 │ │     }
  │ ╰─────^

warning: Implicit data leak via return - off: 12
   ┌─ tests/confidentiality_analysis/read_ref.move:7:5
   │
 7 │ ╭     fun read_ref_S_while_pc_S_incorrect(x: u64, y: &u64): u64 {
 8 │ │         if (x > 0) {
 9 │ │             return *y
10 │ │         };
11 │ │         // will be flagged since this return is part of the else branch
12 │ │         0
13 │ │     }
   │ ╰─────^

warning: Implicit data leak via return - off: 7
   ┌─ tests/confidentiality_analysis/read_ref.move:7:5
   │
 7 │ ╭     fun read_ref_S_while_pc_S_incorrect(x: u64, y: &u64): u64 {
 8 │ │         if (x > 0) {
 9 │ │             return *y
10 │ │         };
11 │ │         // will be flagged since this return is part of the else branch
12 │ │         0
13 │ │     }
   │ ╰─────^

warning: Implicit data leak via return - off: 11
   ┌─ tests/confidentiality_analysis/read_ref.move:15:5
   │
15 │ ╭     fun read_ref_P_while_pc_S_incorrect(x: u64): u64 {
16 │ │         let y = &0;
17 │ │         if (x > 0) {
18 │ │             return *y
   · │
21 │ │         0
22 │ │     }
   │ ╰─────^

warning: Implicit data leak via return - off: 16
   ┌─ tests/confidentiality_analysis/read_ref.move:15:5
   │
15 │ ╭     fun read_ref_P_while_pc_S_incorrect(x: u64): u64 {
16 │ │         let y = &0;
17 │ │         if (x > 0) {
18 │ │             return *y
   · │
21 │ │         0
22 │ │     }
   │ ╰─────^
