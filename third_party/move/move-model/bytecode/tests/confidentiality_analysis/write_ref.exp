============ initial translation from Move ================

[variant baseline]
fun WriteRef::write_ref_P_while_pc_P() {
     var $t0|tmp#$0: u64
     var $t1|x: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := 0
  1: $t0 := $t2
  2: $t3 := borrow_local($t0)
  3: $t1 := $t3
  4: $t4 := 1
  5: $t5 := move($t1)
  6: write_ref($t5, $t4)
  7: return ()
}


[variant baseline]
fun WriteRef::write_ref_P_while_pc_S($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|c: u64
     var $t3|x: &mut u64
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: u64
     var $t11: &mut u64
     var $t12: &mut u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
  0: $t4 := 1
  1: $t2 := $t4
  2: $t5 := 0
  3: $t1 := $t5
  4: $t6 := borrow_local($t1)
  5: $t3 := $t6
  6: $t7 := move($t0)
  7: $t8 := 0
  8: $t9 := >($t7, $t8)
  9: if ($t9) goto 10 else goto 15
 10: label L1
 11: $t10 := copy($t2)
 12: $t11 := move($t3)
 13: write_ref($t11, $t10)
 14: goto 19
 15: label L0
 16: $t12 := move($t3)
 17: drop($t12)
 18: goto 19
 19: label L2
 20: $t13 := move($t2)
 21: $t14 := 1
 22: $t15 := +($t13, $t14)
 23: drop($t15)
 24: return ()
}


[variant baseline]
fun WriteRef::write_ref_S_while_pc_P($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|x: &mut u64
     var $t3: u64
     var $t4: &mut u64
     var $t5: u64
     var $t6: &mut u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := move($t0)
  5: $t6 := move($t2)
  6: write_ref($t6, $t5)
  7: return ()
}


[variant baseline]
fun WriteRef::write_ref_S_while_pc_S($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|x: &mut u64
     var $t3: u64
     var $t4: &mut u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: u64
     var $t9: &mut u64
     var $t10: &mut u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := copy($t0)
  5: $t6 := 0
  6: $t7 := >($t5, $t6)
  7: if ($t7) goto 8 else goto 13
  8: label L1
  9: $t8 := move($t0)
 10: $t9 := move($t2)
 11: write_ref($t9, $t8)
 12: goto 17
 13: label L0
 14: $t10 := move($t2)
 15: drop($t10)
 16: goto 17
 17: label L2
 18: return ()
}

============ after pipeline `confidentiality_analysis` ================

[variant baseline]
fun WriteRef::write_ref_P_while_pc_P() {
     var $t0|tmp#$0: u64
     var $t1|x: &mut u64
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := 0
  1: $t0 := $t2
  2: $t3 := borrow_local($t0)
  3: $t1 := $t3
  4: $t4 := 1
  5: $t5 := move($t1)
  6: write_ref($t5, $t4)
  7: return ()
}


[variant baseline]
fun WriteRef::write_ref_P_while_pc_S($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|c: u64
     var $t3|x: &mut u64
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: u64
     var $t11: &mut u64
     var $t12: &mut u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
  0: $t4 := 1
  1: $t2 := $t4
  2: $t5 := 0
  3: $t1 := $t5
  4: $t6 := borrow_local($t1)
  5: $t3 := $t6
  6: $t7 := move($t0)
  7: $t8 := 0
  8: $t9 := >($t7, $t8)
  9: if ($t9) goto 10 else goto 15
 10: label L1
 11: $t10 := copy($t2)
 12: $t11 := move($t3)
 13: write_ref($t11, $t10)
 14: goto 19
 15: label L0
 16: $t12 := move($t3)
 17: drop($t12)
 18: goto 19
 19: label L2
 20: $t13 := move($t2)
 21: $t14 := 1
 22: $t15 := +($t13, $t14)
 23: drop($t15)
 24: return ()
}


[variant baseline]
fun WriteRef::write_ref_S_while_pc_P($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|x: &mut u64
     var $t3: u64
     var $t4: &mut u64
     var $t5: u64
     var $t6: &mut u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := move($t0)
  5: $t6 := move($t2)
  6: write_ref($t6, $t5)
  7: return ()
}


[variant baseline]
fun WriteRef::write_ref_S_while_pc_S($t0|y: u64) {
     var $t1|tmp#$1: u64
     var $t2|x: &mut u64
     var $t3: u64
     var $t4: &mut u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: u64
     var $t9: &mut u64
     var $t10: &mut u64
  0: $t3 := 0
  1: $t1 := $t3
  2: $t4 := borrow_local($t1)
  3: $t2 := $t4
  4: $t5 := copy($t0)
  5: $t6 := 0
  6: $t7 := >($t5, $t6)
  7: if ($t7) goto 8 else goto 13
  8: label L1
  9: $t8 := move($t0)
 10: $t9 := move($t2)
 11: write_ref($t9, $t8)
 12: goto 17
 13: label L0
 14: $t10 := move($t2)
 15: drop($t10)
 16: goto 17
 17: label L2
 18: return ()
}

============ Diagnostics ================
warning: unused assignment
   ┌─ tests/confidentiality_analysis/write_ref.move:18:9
   │
18 │         c = c + 1;
   │         ^ Unused assignment or binding for local 'c'. Consider removing, replacing with '_', or prefixing with '_' (e.g., '_c')
